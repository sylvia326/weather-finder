{"version":3,"sources":["component/Titles.js","component/Form.js","component/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","wrongInfo","API_KEY","App","state","undefined","e","a","async","preventDefault","target","elements","value","fetch","api_call","json","data","cod","setState","console","log","main","temp","sys","weather","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0OAEsBA,E,iLAGd,OACI,6BACI,wBAAIC,UAAU,0BAAd,kBACA,wBAAIA,UAAU,6BAAd,qD,GANqBC,aCAfC,E,iLAGd,OACI,6BACI,0BAAMC,SAAUC,KAAKC,MAAMC,YACvB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,qD,GAReR,aCAbS,E,iLAGd,OACI,yBAAKV,UAAU,iBAEPI,KAAKC,MAAMM,MAAQP,KAAKC,MAAMO,SAAW,uBAAGZ,UAAU,gBAAb,YACrC,0BAAMA,UAAU,kBAAhB,IAAmCI,KAAKC,MAAMM,KAA9C,IAAqDP,KAAKC,MAAMO,UAIpER,KAAKC,MAAMQ,aAAe,uBAAGb,UAAU,gBAAb,eACtB,0BAAMA,UAAU,kBAAhB,IAAmCI,KAAKC,MAAMQ,cAIlDT,KAAKC,MAAMS,UAAY,uBAAGd,UAAU,gBAAb,YACnB,0BAAMA,UAAU,kBAAhB,IAAmCI,KAAKC,MAAMS,WAIlDV,KAAKC,MAAMU,aAAe,uBAAGf,UAAU,gBAAb,eACtB,0BAAMA,UAAU,kBAAhB,IAAmCI,KAAKC,MAAMU,cAIlDX,KAAKC,MAAMW,OAAS,uBAAGhB,UAAU,gBAC7B,0BAAMA,UAAU,kBAAhB,IAAmCI,KAAKC,MAAMW,QAIlDZ,KAAKC,MAAMY,WAAa,uBAAGjB,UAAU,gBACjC,0BAAMA,UAAU,kBAAhB,IAAmCI,KAAKC,MAAMY,iB,GAhChChB,aCIhCiB,EAAU,mCAEKC,E,2MACjBC,MAAQ,CACJP,iBAAaQ,EACbV,UAAMU,EACNT,aAASS,EACTP,cAAUO,EACVN,iBAAYM,EACZL,MAAO,0BACPC,UAAU,I,EAGdX,WAAa,SAAOgB,GAAP,qBAAAC,EAAAC,OAAA,uDACTF,EAAEG,iBACId,EAAOW,EAAEI,OAAOC,SAAShB,KAAKiB,MAC9BhB,EAAUU,EAAEI,OAAOC,SAASf,QAAQgB,MAHjC,WAAAL,EAAA,MAIcM,MAAM,qDAAD,OAAsDlB,EAAtD,YAA8DC,EAA9D,kBAA+EM,EAA/E,mBAJnB,cAIHY,EAJG,kBAAAP,EAAA,MAKUO,EAASC,QALnB,OAMQ,SADXC,EALG,QAMAC,IACL,EAAKC,SAAS,CACVrB,iBAAaQ,EACbV,UAAMU,EACNT,aAASS,EACTP,cAAUO,EACVN,iBAAaM,EACbL,WAAOK,EACPJ,UAAU,sCACPN,GAAQC,IACfuB,QAAQC,IAAIJ,GACZ,EAAKE,SAAS,CACVrB,YAAamB,EAAKK,KAAKC,KACvB3B,KAAMqB,EAAKxB,KACXI,QAASoB,EAAKO,IAAI3B,QAClBE,SAAUkB,EAAKK,KAAKvB,SACpBC,YAAaiB,EAAKQ,QAAQ,GAAGzB,YAC7BC,MAAO,GACPC,UAAU,MAxBT,uC,wEA6BT,OACI,6BACI,yBAAKjB,UAAU,WACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,4BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,2BACX,kBAAC,EAAD,CAAMM,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CACIO,YAAaT,KAAKgB,MAAMP,YACxBF,KAAMP,KAAKgB,MAAMT,KACjBC,QAASR,KAAKgB,MAAMR,QACpBE,SAAUV,KAAKgB,MAAMN,SACrBC,YAAaX,KAAKgB,MAAML,YACxBC,MAAOZ,KAAKgB,MAAMJ,MAClBC,UAAWb,KAAKgB,MAAMH,sB,GA1D7BhB,aCIbwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.565b4b1d.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nexport default  class Titles extends Component {\n\n    render(){\n        return(\n            <div>\n                <h1 className=\"title-container__title\">Weather Finder</h1>\n                <h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react'\n\nexport default  class Form extends Component {\n\n    render(){\n        return(\n            <div>\n                <form onSubmit={this.props.getWeather}>\n                    <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\n                    <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\n                    <button>Get Weather</button>\n                </form>\n\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react'\n\nexport default  class Weather extends Component {\n\n    render(){\n        return(\n            <div className=\"weather__info\">\n                {\n                    this.props.city && this.props.country && <p className=\"weather__key\">Location:\n                        <span className=\"weather__value\"> {this.props.city},{this.props.country}</span>\n                        </p>\n                }\n                {\n                    this.props.temperature && <p className=\"weather__key\">Temperature:\n                        <span className=\"weather__value\"> {this.props.temperature}</span>\n                    </p>\n                }\n                {\n                    this.props.humidity && <p className=\"weather__key\">Humidity:\n                        <span className=\"weather__value\"> {this.props.humidity}</span>\n                    </p>\n                }\n                {\n                    this.props.description && <p className=\"weather__key\">Description:\n                        <span className=\"weather__value\"> {this.props.description}</span>\n                    </p>\n                }\n                {\n                    this.props.error && <p className=\"weather__key\">\n                        <span className=\"weather__error\"> {this.props.error}</span>\n                    </p>\n                }\n                {\n                    this.props.wrongInfo && <p className=\"weather__key\">\n                        <span className=\"weather__error\"> {this.props.wrongInfo}</span>\n                    </p>\n                }\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react';\n\nimport Titles from \"./component/Titles\";\nimport Form from \"./component/Form\";\nimport Weather from \"./component/Weather\";\n\nconst API_KEY = \"400c31feb64291964c32eebeaa752611\";\n\nexport default class App extends Component {\n    state = {\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description:undefined,\n        error: \"Please enter the value.\",\n        wrongInfo:\"\"\n    }\n\n    getWeather = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n        const data = await api_call.json();\n        if (data.cod === \"404\"){\n            this.setState({\n                temperature: undefined,\n                city: undefined,\n                country: undefined,\n                humidity: undefined,\n                description: undefined,\n                error: undefined,\n                wrongInfo:\"Please enter correct information.\"})\n        } else if (city && country) {\n            console.log(data);\n            this.setState({\n                temperature: data.main.temp,\n                city: data.name,\n                country: data.sys.country,\n                humidity: data.main.humidity,\n                description: data.weather[0].description,\n                error: \"\",\n                wrongInfo:\"\"\n            });\n        }\n    };\n    render(){\n        return (\n            <div>\n                <div className=\"wrapper\">\n                    <div className=\"main\">\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <div className=\"col-xs-5 title-container\">\n                                  <Titles />\n                                </div>\n                                <div className=\"col-xs-7 form-container\">\n                                    <Form getWeather={this.getWeather}/>\n                                    <Weather\n                                        temperature={this.state.temperature}\n                                        city={this.state.city}\n                                        country={this.state.country}\n                                        humidity={this.state.humidity}\n                                        description={this.state.description}\n                                        error={this.state.error}\n                                        wrongInfo={this.state.wrongInfo}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}