{"version":3,"sources":["component/Titles.js","component/Form.js","component/Weather.js","component/Object-Map.js","App.js","component/ISO-city.js","serviceWorker.js","index.js"],"names":["Titles","className","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","wrongInfo","convertValueAndKey","API_KEY","ISOMap","obj","keys","Object","values","map","elem","toUpperCase","Map","i","length","set","App","state","undefined","e","a","async","preventDefault","target","elements","value","countryCode","get","fetch","api_call","json","data","console","log","cod","setState","has","main","temp","sys","weather","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0OAEsBA,E,iLAGd,OACI,6BACI,wBAAIC,UAAU,0BAAd,kBACA,wBAAIA,UAAU,6BAAd,qD,GANqBC,aCAfC,E,iLAGd,OACI,6BACI,0BAAMC,SAAUC,KAAKC,MAAMC,YACvB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,cAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,iBAC9C,qD,GAReR,aCAbS,E,iLAGd,OACI,yBAAKV,UAAU,iBAEPI,KAAKC,MAAMM,MAAQP,KAAKC,MAAMO,SAAW,uBAAGZ,UAAU,gBAAb,YACrC,0BAAMA,UAAU,kBAAhB,IAAmCI,KAAKC,MAAMM,KAA9C,IAAqDP,KAAKC,MAAMO,UAIpER,KAAKC,MAAMQ,aAAe,uBAAGb,UAAU,gBAAb,eACtB,0BAAMA,UAAU,kBAAhB,IAAmCI,KAAKC,MAAMQ,YAA9C,SAIJT,KAAKC,MAAMS,UAAY,uBAAGd,UAAU,gBAAb,YACnB,0BAAMA,UAAU,kBAAhB,IAAmCI,KAAKC,MAAMS,WAIlDV,KAAKC,MAAMU,aAAe,uBAAGf,UAAU,gBAAb,eACtB,0BAAMA,UAAU,kBAAhB,IAAmCI,KAAKC,MAAMU,cAIlDX,KAAKC,MAAMW,OAAS,uBAAGhB,UAAU,gBAC7B,0BAAMA,UAAU,kBAAhB,IAAmCI,KAAKC,MAAMW,QAIlDZ,KAAKC,MAAMY,WAAa,uBAAGjB,UAAU,gBACjC,0BAAMA,UAAU,kBAAhB,IAAmCI,KAAKC,MAAMY,iB,GAhChChB,aCYvBiB,ICNTC,EAAU,mCACVC,EDTN,SAA4BC,GACxB,IAAIC,EAAOC,OAAOD,KAAKD,GACnBG,EAASD,OAAOC,OAAOH,GAC3BG,EAASA,EAAOC,KAAI,SAACC,GAAD,OAAUA,EAAKC,iBAInC,IAFA,IAAIF,EAAM,IAAIG,IAELC,EAAI,EAAGA,EAAIP,EAAKQ,OAAQD,IAC7BJ,EAAIM,IAAIP,EAAOK,GAAIP,EAAKO,IAG5B,OAAOJ,ECFIP,CCTF,CACT,GAAM,cACN,GAAM,gBACN,GAAM,UACN,GAAM,UACN,GAAM,iBACN,GAAM,UACN,GAAM,SACN,GAAM,WACN,GAAM,aACN,GAAM,sBACN,GAAM,YACN,GAAM,UACN,GAAM,QACN,GAAM,YACN,GAAM,UACN,GAAM,aACN,GAAM,UACN,GAAM,UACN,GAAM,aACN,GAAM,WACN,GAAM,UACN,GAAM,UACN,GAAM,SACN,GAAM,QACN,GAAM,UACN,GAAM,SACN,GAAM,UACN,GAAM,yBACN,GAAM,WACN,GAAM,gBACN,GAAM,SACN,GAAM,iCACN,GAAM,oBACN,GAAM,WACN,GAAM,eACN,GAAM,UACN,GAAM,WACN,GAAM,WACN,GAAM,SACN,GAAM,aACN,GAAM,iBACN,GAAM,2BACN,GAAM,OACN,GAAM,QACN,GAAM,QACN,GAAM,mBACN,GAAM,0BACN,GAAM,WACN,GAAM,UACN,GAAM,QACN,GAAM,6BACN,GAAM,eACN,GAAM,aACN,GAAM,gBACN,GAAM,UACN,GAAM,OACN,GAAM,SACN,GAAM,iBACN,GAAM,UACN,GAAM,WACN,GAAM,WACN,GAAM,qBACN,GAAM,UACN,GAAM,QACN,GAAM,cACN,GAAM,oBACN,GAAM,UACN,GAAM,UACN,GAAM,WACN,GAAM,8BACN,GAAM,gBACN,GAAM,OACN,GAAM,UACN,GAAM,SACN,GAAM,gBACN,GAAM,mBACN,GAAM,8BACN,GAAM,QACN,GAAM,SACN,GAAM,UACN,GAAM,UACN,GAAM,QACN,GAAM,YACN,GAAM,SACN,GAAM,YACN,GAAM,UACN,GAAM,aACN,GAAM,OACN,GAAM,YACN,GAAM,WACN,GAAM,SACN,GAAM,gBACN,GAAM,SACN,GAAM,QACN,GAAM,kCACN,GAAM,gCACN,GAAM,WACN,GAAM,YACN,GAAM,UACN,GAAM,UACN,GAAM,QACN,GAAM,YACN,GAAM,4BACN,GAAM,OACN,GAAM,UACN,GAAM,cACN,GAAM,SACN,GAAM,QACN,GAAM,UACN,GAAM,QACN,GAAM,SACN,GAAM,SACN,GAAM,aACN,GAAM,QACN,GAAM,WACN,GAAM,QACN,GAAM,SACN,GAAM,aACN,GAAM,mCACN,GAAM,SACN,GAAM,UACN,GAAM,UACN,GAAM,UACN,GAAM,yBACN,GAAM,gBACN,GAAM,YACN,GAAM,aACN,GAAM,QACN,GAAM,YACN,GAAM,aACN,GAAM,SACN,GAAM,WACN,GAAM,WACN,GAAM,OACN,GAAM,QACN,GAAM,mBACN,GAAM,aACN,GAAM,aACN,GAAM,YACN,GAAM,UACN,GAAM,SACN,GAAM,kCACN,GAAM,UACN,GAAM,SACN,GAAM,WACN,GAAM,aACN,GAAM,aACN,GAAM,UACN,GAAM,aACN,GAAM,UACN,GAAM,UACN,GAAM,QACN,GAAM,QACN,GAAM,cACN,GAAM,uBACN,GAAM,gBACN,GAAM,cACN,GAAM,YACN,GAAM,QACN,GAAM,UACN,GAAM,OACN,GAAM,iBACN,GAAM,2BACN,GAAM,SACN,GAAM,OACN,GAAM,WACN,GAAM,QACN,GAAM,kCACN,GAAM,SACN,GAAM,mBACN,GAAM,WACN,GAAM,OACN,GAAM,cACN,GAAM,WACN,GAAM,SACN,GAAM,WACN,GAAM,cACN,GAAM,QACN,GAAM,UACN,GAAM,UACN,GAAM,qBACN,GAAM,SACN,GAAM,mBACN,GAAM,eACN,GAAM,wBACN,GAAM,cACN,GAAM,eACN,GAAM,4BACN,GAAM,+BACN,GAAM,QACN,GAAM,aACN,GAAM,wBACN,GAAM,eACN,GAAM,UACN,GAAM,SACN,GAAM,aACN,GAAM,eACN,GAAM,YACN,GAAM,WACN,GAAM,WACN,GAAM,kBACN,GAAM,UACN,GAAM,eACN,GAAM,kCACN,GAAM,QACN,GAAM,YACN,GAAM,QACN,GAAM,WACN,GAAM,yBACN,GAAM,YACN,GAAM,SACN,GAAM,cACN,GAAM,uBACN,GAAM,SACN,GAAM,aACN,GAAM,WACN,GAAM,WACN,GAAM,cACN,GAAM,OACN,GAAM,UACN,GAAM,QACN,GAAM,sBACN,GAAM,UACN,GAAM,SACN,GAAM,eACN,GAAM,2BACN,GAAM,SACN,GAAM,SACN,GAAM,UACN,GAAM,uBACN,GAAM,iBACN,GAAM,gBACN,GAAM,iCACN,GAAM,UACN,GAAM,aACN,GAAM,UACN,GAAM,YACN,GAAM,WACN,GAAM,0BACN,GAAM,uBACN,GAAM,oBACN,GAAM,iBACN,GAAM,QACN,GAAM,SACN,GAAM,aDzOWc,E,2MACjBC,MAAQ,CACJpB,iBAAaqB,EACbvB,UAAMuB,EACNtB,aAASsB,EACTpB,cAAUoB,EACVnB,iBAAYmB,EACZlB,MAAO,0BACPC,UAAU,I,EAGdX,WAAa,SAAO6B,GAAP,uBAAAC,EAAAC,OAAA,uDACTF,EAAEG,iBACI3B,EAAOwB,EAAEI,OAAOC,SAAS7B,KAAK8B,MAC9B7B,EAAUuB,EAAEI,OAAOC,SAAS5B,QAAQ6B,MAAMd,cAE5Ce,EAActB,EAAOuB,IAAI/B,GALpB,WAAAwB,EAAA,MAQcQ,MAAM,qDAAD,OAAsDjC,EAAtD,YAA8D+B,EAA9D,kBAAmFvB,EAAnF,mBARnB,cAQH0B,EARG,kBAAAT,EAAA,MASUS,EAASC,QATnB,OASHC,EATG,OAUTC,QAAQC,IAAIF,GACK,QAAbA,EAAKG,IACL,EAAKC,SAAS,CACVtC,iBAAaqB,EACbvB,UAAMuB,EACNtB,aAASsB,EACTpB,cAAUoB,EACVnB,iBAAamB,EACblB,MAAO,GACPC,UAAU,sCAGTN,GAAQC,GACPQ,EAAOgC,IAAIxC,GAWjB,EAAKuC,SAAS,CACVtC,YAAakC,EAAKM,KAAKC,KACvB3C,KAAMoC,EAAKvC,KACXI,QAASmC,EAAKQ,IAAI3C,QAClBE,SAAUiC,EAAKM,KAAKvC,SACpBC,YAAagC,EAAKS,QAAQ,GAAGzC,YAC7BC,MAAO,GACPC,UAAU,KAId,EAAKkC,SAAS,CACVtC,iBAAaqB,EACbvB,UAAMuB,EACNtB,aAASsB,EACTpB,cAAUoB,EACVnB,iBAAamB,EACblB,MAAO,GACPC,UAAU,sCApDT,uC,wEAyDT,OACI,6BACI,yBAAKjB,UAAU,WACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,4BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,2BACX,kBAAC,EAAD,CAAMM,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CACIO,YAAaT,KAAK6B,MAAMpB,YACxBF,KAAMP,KAAK6B,MAAMtB,KACjBC,QAASR,KAAK6B,MAAMrB,QACpBE,SAAUV,KAAK6B,MAAMnB,SACrBC,YAAaX,KAAK6B,MAAMlB,YACxBC,MAAOZ,KAAK6B,MAAMjB,MAClBC,UAAWb,KAAK6B,MAAMhB,sB,GAtF7BhB,aEAbwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.fc8ab289.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nexport default  class Titles extends Component {\n\n    render(){\n        return(\n            <div>\n                <h1 className=\"title-container__title\">Weather Finder</h1>\n                <h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react'\n\nexport default  class Form extends Component {\n\n    render(){\n        return(\n            <div>\n                <form onSubmit={this.props.getWeather}>\n                    <input type=\"text\" name=\"city\" placeholder=\"City Name\"/>\n                    <input type=\"text\" name=\"country\" placeholder=\"Country Name\"/>\n                    <button>Get Weather</button>\n                </form>\n\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react'\n\nexport default  class Weather extends Component {\n\n    render(){\n        return(\n            <div className=\"weather__info\">\n                {\n                    this.props.city && this.props.country && <p className=\"weather__key\">Location:\n                        <span className=\"weather__value\"> {this.props.city},{this.props.country}</span>\n                        </p>\n                }\n                {\n                    this.props.temperature && <p className=\"weather__key\">Temperature:\n                        <span className=\"weather__value\"> {this.props.temperature}&deg;</span>\n                    </p>\n                }\n                {\n                    this.props.humidity && <p className=\"weather__key\">Humidity:\n                        <span className=\"weather__value\"> {this.props.humidity}</span>\n                    </p>\n                }\n                {\n                    this.props.description && <p className=\"weather__key\">Description:\n                        <span className=\"weather__value\"> {this.props.description}</span>\n                    </p>\n                }\n                {\n                    this.props.error && <p className=\"weather__key\">\n                        <span className=\"weather__error\"> {this.props.error}</span>\n                    </p>\n                }\n                {\n                    this.props.wrongInfo && <p className=\"weather__key\">\n                        <span className=\"weather__error\"> {this.props.wrongInfo}</span>\n                    </p>\n                }\n            </div>\n        )\n    }\n}\n","function convertValueAndKey(obj) {\n    let keys = Object.keys(obj);\n    let values = Object.values(obj);\n    values = values.map((elem) => elem.toUpperCase())\n\n    let map = new Map();\n\n    for (let i = 0; i < keys.length; i++) {\n        map.set(values[i], keys[i]);\n    }\n\n    return map;\n}\n\nexport default convertValueAndKey","import React, {Component} from 'react';\n\nimport Titles from \"./component/Titles\";\nimport Form from \"./component/Form\";\nimport Weather from \"./component/Weather\";\nimport ISOCity from \"../src/component/ISO-city\";\nimport convertValueAndKey from \"../src/component/Object-Map\";\n\nconst API_KEY = \"400c31feb64291964c32eebeaa752611\";\nconst ISOMap = convertValueAndKey(ISOCity)\n\n\nexport default class App extends Component {\n    state = {\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description:undefined,\n        error: \"Please enter the value.\",\n        wrongInfo:\"\"\n    }\n\n    getWeather = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value.toUpperCase();\n        \n        let countryCode = ISOMap.get(country)\n        \n\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${API_KEY}&units=metric`);\n        const data = await api_call.json();\n        console.log(data)\n        if (data.cod === '404') {\n            this.setState({ \n                temperature: undefined,\n                city: undefined,\n                country: undefined,\n                humidity: undefined,\n                description: undefined,\n                error: \"\",\n                wrongInfo:\"Please enter correct information.\"\n            })\n        }\n        else if (city && country) {\n            if ( !ISOMap.has(country)) {\n                this.setState({ \n                    temperature: undefined,\n                    city: undefined,\n                    country: undefined,\n                    humidity: undefined,\n                    description: undefined,\n                    error: \"\",\n                    wrongInfo:\"Please enter correct information.\"\n                })\n            } else {\n            this.setState({\n                temperature: data.main.temp,\n                city: data.name,\n                country: data.sys.country,\n                humidity: data.main.humidity,\n                description: data.weather[0].description,\n                error: \"\",\n                wrongInfo:\"\"\n            })\n        };\n        } else {\n            this.setState({ \n                temperature: undefined,\n                city: undefined,\n                country: undefined,\n                humidity: undefined,\n                description: undefined,\n                error: \"\",\n                wrongInfo:\"Please enter correct information.\"\n            })\n        }\n    };\n    render(){\n        return (\n            <div>\n                <div className=\"wrapper\">\n                    <div className=\"main\">\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <div className=\"col-xs-5 title-container\">\n                                  <Titles />\n                                </div>\n                                <div className=\"col-xs-7 form-container\">\n                                    <Form getWeather={this.getWeather}/>\n                                    <Weather\n                                        temperature={this.state.temperature}\n                                        city={this.state.city}\n                                        country={this.state.country}\n                                        humidity={this.state.humidity}\n                                        description={this.state.description}\n                                        error={this.state.error}\n                                        wrongInfo={this.state.wrongInfo}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};\n\n","let ISOCity ={\n    \"AF\": \"Afghanistan\",\n    \"AX\": \"Aland Islands\",\n    \"AL\": \"Albania\",\n    \"DZ\": \"Algeria\",\n    \"AS\": \"American Samoa\",\n    \"AD\": \"Andorra\",\n    \"AO\": \"Angola\",\n    \"AI\": \"Anguilla\",\n    \"AQ\": \"Antarctica\",\n    \"AG\": \"Antigua And Barbuda\",\n    \"AR\": \"Argentina\",\n    \"AM\": \"Armenia\",\n    \"AW\": \"Aruba\",\n    \"AU\": \"Australia\",\n    \"AT\": \"Austria\",\n    \"AZ\": \"Azerbaijan\",\n    \"BS\": \"Bahamas\",\n    \"BH\": \"Bahrain\",\n    \"BD\": \"Bangladesh\",\n    \"BB\": \"Barbados\",\n    \"BY\": \"Belarus\",\n    \"BE\": \"Belgium\",\n    \"BZ\": \"Belize\",\n    \"BJ\": \"Benin\",\n    \"BM\": \"Bermuda\",\n    \"BT\": \"Bhutan\",\n    \"BO\": \"Bolivia\",\n    \"BA\": \"Bosnia And Herzegovina\",\n    \"BW\": \"Botswana\",\n    \"BV\": \"Bouvet Island\",\n    \"BR\": \"Brazil\",\n    \"IO\": \"British Indian Ocean Territory\",\n    \"BN\": \"Brunei Darussalam\",\n    \"BG\": \"Bulgaria\",\n    \"BF\": \"Burkina Faso\",\n    \"BI\": \"Burundi\",\n    \"KH\": \"Cambodia\",\n    \"CM\": \"Cameroon\",\n    \"CA\": \"Canada\",\n    \"CV\": \"Cape Verde\",\n    \"KY\": \"Cayman Islands\",\n    \"CF\": \"Central African Republic\",\n    \"TD\": \"Chad\",\n    \"CL\": \"Chile\",\n    \"CN\": \"China\",\n    \"CX\": \"Christmas Island\",\n    \"CC\": \"Cocos (Keeling) Islands\",\n    \"CO\": \"Colombia\",\n    \"KM\": \"Comoros\",\n    \"CG\": \"Congo\",\n    \"CD\": \"Congo, Democratic Republic\",\n    \"CK\": \"Cook Islands\",\n    \"CR\": \"Costa Rica\",\n    \"CI\": \"Cote D\\\"Ivoire\",\n    \"HR\": \"Croatia\",\n    \"CU\": \"Cuba\",\n    \"CY\": \"Cyprus\",\n    \"CZ\": \"Czech Republic\",\n    \"DK\": \"Denmark\",\n    \"DJ\": \"Djibouti\",\n    \"DM\": \"Dominica\",\n    \"DO\": \"Dominican Republic\",\n    \"EC\": \"Ecuador\",\n    \"EG\": \"Egypt\",\n    \"SV\": \"El Salvador\",\n    \"GQ\": \"Equatorial Guinea\",\n    \"ER\": \"Eritrea\",\n    \"EE\": \"Estonia\",\n    \"ET\": \"Ethiopia\",\n    \"FK\": \"Falkland Islands (Malvinas)\",\n    \"FO\": \"Faroe Islands\",\n    \"FJ\": \"Fiji\",\n    \"FI\": \"Finland\",\n    \"FR\": \"France\",\n    \"GF\": \"French Guiana\",\n    \"PF\": \"French Polynesia\",\n    \"TF\": \"French Southern Territories\",\n    \"GA\": \"Gabon\",\n    \"GM\": \"Gambia\",\n    \"GE\": \"Georgia\",\n    \"DE\": \"Germany\",\n    \"GH\": \"Ghana\",\n    \"GI\": \"Gibraltar\",\n    \"GR\": \"Greece\",\n    \"GL\": \"Greenland\",\n    \"GD\": \"Grenada\",\n    \"GP\": \"Guadeloupe\",\n    \"GU\": \"Guam\",\n    \"GT\": \"Guatemala\",\n    \"GG\": \"Guernsey\",\n    \"GN\": \"Guinea\",\n    \"GW\": \"Guinea-Bissau\",\n    \"GY\": \"Guyana\",\n    \"HT\": \"Haiti\",\n    \"HM\": \"Heard Island & Mcdonald Islands\",\n    \"VA\": \"Holy See (Vatican City State)\",\n    \"HN\": \"Honduras\",\n    \"HK\": \"Hong Kong\",\n    \"HU\": \"Hungary\",\n    \"IS\": \"Iceland\",\n    \"IN\": \"India\",\n    \"ID\": \"Indonesia\",\n    \"IR\": \"Iran, Islamic Republic Of\",\n    \"IQ\": \"Iraq\",\n    \"IE\": \"Ireland\",\n    \"IM\": \"Isle Of Man\",\n    \"IL\": \"Israel\",\n    \"IT\": \"Italy\",\n    \"JM\": \"Jamaica\",\n    \"JP\": \"Japan\",\n    \"JE\": \"Jersey\",\n    \"JO\": \"Jordan\",\n    \"KZ\": \"Kazakhstan\",\n    \"KE\": \"Kenya\",\n    \"KI\": \"Kiribati\",\n    \"KR\": \"Korea\",\n    \"KW\": \"Kuwait\",\n    \"KG\": \"Kyrgyzstan\",\n    \"LA\": \"Lao People\\\"s Democratic Republic\",\n    \"LV\": \"Latvia\",\n    \"LB\": \"Lebanon\",\n    \"LS\": \"Lesotho\",\n    \"LR\": \"Liberia\",\n    \"LY\": \"Libyan Arab Jamahiriya\",\n    \"LI\": \"Liechtenstein\",\n    \"LT\": \"Lithuania\",\n    \"LU\": \"Luxembourg\",\n    \"MO\": \"Macao\",\n    \"MK\": \"Macedonia\",\n    \"MG\": \"Madagascar\",\n    \"MW\": \"Malawi\",\n    \"MY\": \"Malaysia\",\n    \"MV\": \"Maldives\",\n    \"ML\": \"Mali\",\n    \"MT\": \"Malta\",\n    \"MH\": \"Marshall Islands\",\n    \"MQ\": \"Martinique\",\n    \"MR\": \"Mauritania\",\n    \"MU\": \"Mauritius\",\n    \"YT\": \"Mayotte\",\n    \"MX\": \"Mexico\",\n    \"FM\": \"Micronesia, Federated States Of\",\n    \"MD\": \"Moldova\",\n    \"MC\": \"Monaco\",\n    \"MN\": \"Mongolia\",\n    \"ME\": \"Montenegro\",\n    \"MS\": \"Montserrat\",\n    \"MA\": \"Morocco\",\n    \"MZ\": \"Mozambique\",\n    \"MM\": \"Myanmar\",\n    \"NA\": \"Namibia\",\n    \"NR\": \"Nauru\",\n    \"NP\": \"Nepal\",\n    \"NL\": \"Netherlands\",\n    \"AN\": \"Netherlands Antilles\",\n    \"NC\": \"New Caledonia\",\n    \"NZ\": \"New Zealand\",\n    \"NI\": \"Nicaragua\",\n    \"NE\": \"Niger\",\n    \"NG\": \"Nigeria\",\n    \"NU\": \"Niue\",\n    \"NF\": \"Norfolk Island\",\n    \"MP\": \"Northern Mariana Islands\",\n    \"NO\": \"Norway\",\n    \"OM\": \"Oman\",\n    \"PK\": \"Pakistan\",\n    \"PW\": \"Palau\",\n    \"PS\": \"Palestinian Territory, Occupied\",\n    \"PA\": \"Panama\",\n    \"PG\": \"Papua New Guinea\",\n    \"PY\": \"Paraguay\",\n    \"PE\": \"Peru\",\n    \"PH\": \"Philippines\",\n    \"PN\": \"Pitcairn\",\n    \"PL\": \"Poland\",\n    \"PT\": \"Portugal\",\n    \"PR\": \"Puerto Rico\",\n    \"QA\": \"Qatar\",\n    \"RE\": \"Reunion\",\n    \"RO\": \"Romania\",\n    \"RU\": \"Russian Federation\",\n    \"RW\": \"Rwanda\",\n    \"BL\": \"Saint Barthelemy\",\n    \"SH\": \"Saint Helena\",\n    \"KN\": \"Saint Kitts And Nevis\",\n    \"LC\": \"Saint Lucia\",\n    \"MF\": \"Saint Martin\",\n    \"PM\": \"Saint Pierre And Miquelon\",\n    \"VC\": \"Saint Vincent And Grenadines\",\n    \"WS\": \"Samoa\",\n    \"SM\": \"San Marino\",\n    \"ST\": \"Sao Tome And Principe\",\n    \"SA\": \"Saudi Arabia\",\n    \"SN\": \"Senegal\",\n    \"RS\": \"Serbia\",\n    \"SC\": \"Seychelles\",\n    \"SL\": \"Sierra Leone\",\n    \"SG\": \"Singapore\",\n    \"SK\": \"Slovakia\",\n    \"SI\": \"Slovenia\",\n    \"SB\": \"Solomon Islands\",\n    \"SO\": \"Somalia\",\n    \"ZA\": \"South Africa\",\n    \"GS\": \"South Georgia And Sandwich Isl.\",\n    \"ES\": \"Spain\",\n    \"LK\": \"Sri Lanka\",\n    \"SD\": \"Sudan\",\n    \"SR\": \"Suriname\",\n    \"SJ\": \"Svalbard And Jan Mayen\",\n    \"SZ\": \"Swaziland\",\n    \"SE\": \"Sweden\",\n    \"CH\": \"Switzerland\",\n    \"SY\": \"Syrian Arab Republic\",\n    \"TW\": \"Taiwan\",\n    \"TJ\": \"Tajikistan\",\n    \"TZ\": \"Tanzania\",\n    \"TH\": \"Thailand\",\n    \"TL\": \"Timor-Leste\",\n    \"TG\": \"Togo\",\n    \"TK\": \"Tokelau\",\n    \"TO\": \"Tonga\",\n    \"TT\": \"Trinidad And Tobago\",\n    \"TN\": \"Tunisia\",\n    \"TR\": \"Turkey\",\n    \"TM\": \"Turkmenistan\",\n    \"TC\": \"Turks And Caicos Islands\",\n    \"TV\": \"Tuvalu\",\n    \"UG\": \"Uganda\",\n    \"UA\": \"Ukraine\",\n    \"AE\": \"United Arab Emirates\",\n    \"GB\": \"United Kingdom\",\n    \"US\": \"United States\",\n    \"UM\": \"United States Outlying Islands\",\n    \"UY\": \"Uruguay\",\n    \"UZ\": \"Uzbekistan\",\n    \"VU\": \"Vanuatu\",\n    \"VE\": \"Venezuela\",\n    \"VN\": \"Viet Nam\",\n    \"VG\": \"Virgin Islands, British\",\n    \"VI\": \"Virgin Islands, U.S.\",\n    \"WF\": \"Wallis And Futuna\",\n    \"EH\": \"Western Sahara\",\n    \"YE\": \"Yemen\",\n    \"ZM\": \"Zambia\",\n    \"ZW\": \"Zimbabwe\"\n  }\n\nexport default ISOCity\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}